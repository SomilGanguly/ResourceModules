name: "Relocation - Pull"

on:
  workflow_dispatch:
    inputs:
      prerelease:
        type: bool
        description: 'Publish prerelease module'
        required: false
        default: false
  push:
    branches: 
     - users/siddhigupta/generic_internal_function
     
env:
  workloadFolderName: "InfraApps"
  skipComponentGovernanceDetection: true
  modulesFolder: '$(System.DefaultWorkingDirectory)/Modules'
  variablePath: '.global/Pipelines/.templates/var.yml'
  
  #
  # Branch Name
  # As part of the Pull workflow we check a temporary branch
  # this branch was previously know as system, this value can
  # be changed if this name is already reserved for other systems
  # within the repository.
  #
  # Default: automated
  #
  branch: "relocationpullbranch"

  #outputs:
   # newBranchName:
    #    description: 'New branch name'
    #alue: ${{ steps.branch-detection.outputs.newBranchName }}

jobs:
  job_relocation_pull:
    runs-on: ubuntu-latest
    name: "Pull"
    steps:
    
      - name: Set environment variables
        uses: ./.github/actions/templates/setEnvironmentVariables
        with:
          variablesPath: ${{ env.variablesPath }}
      #
      # Shared steps
      # Include shared steps from the 'shared.yml' file
      # to not have to repeat them in every pipeline.
      #
      - name: Shared Step
        uses: SomilGanguly/ResourceModules/.global/Pipelines/.templates/sharedSteps.yml@users/siddhigupta/generic_internal_function
        with:
          AZ_MODULE_VERSION: ${{ secrets.AZ_MODULE_VERSION }}
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

      - name: BranchDetection
        id: branch-detection
        uses: azure/powershell@v1
        with:
          azPSVersion: 'latest'
          inlineScript: |
            $oldbranchname='${{ env.branch }}'
            $branches=git branch -a
            foreach($branch in $branches){
            $modifiedbranch=$branch.Replace('remotes/origin/','')
            if($modifiedbranch -match $oldbranchname+'_'){
            $emptyarray=@()
            $numberonly=$modifiedbranch.Substring($modifiedbranch.IndexOf('_')+1)
            $emptyarray+=$numberonly
            }
            else{
            $emptyarray+=0
            }
            }
            $latestnumber=($emptyarray | measure -Maximum).Maximum + 1
            $newBranchName= $oldbranchname+'_'+$latestnumber
            
            # Output values to be accessed by next jobs
            Write-Output "::set-output name=newBranchName::$newBranchName"
            Write-Output '::endgroup::'

      - name: Initialize
        if: ${{ steps.branch-detection.outputs.newBranchName != '' }}
        uses: azure/powershell@v1
        with:
          azPSVersion: 'latest'
          inlineScript: |
            try{
            $Env:PSModulePath = $Env:PSModulePath, '${{ env.modulesFolder }}' -join [IO.Path]::PathSeparator
            Import-Module .\src\internal\functions\Curated-ExportedARM.ps1 -Force
            Import-Module .\src\internal\functions\Generate-ARMParameters.ps1 -Force
            Import-Module .\src\internal\functions\DiscoverResources.ps1 -Force
            Import-Module .\src\internal\functions\Dependencycopy.ps1 -Force
            Import-Module .\src\internal\functions\Script-Curation.ps1 -Force
            Import-Module .\src\internal\functions\Update-FolderStructureInJson.ps1 -Force
            Import-Module .\src\internal\functions\Modify-SettingFileName.ps1 -Force          
            Import-Module .\src\Functions\Get-Relocationpull.ps1 -Force
            Import-Module .\src\internal\functions\Convert-ARMToBicepParameters.ps1 -Force
            
            $settingfile=get-content -path .\src\Settings.json
            $IncludeWorkloadSubscriptionId=($settingfile | ConvertFrom-Json).RelocationSettings.IncludeWorkloadSubscriptionId
            foreach($subscriptionid in $IncludeWorkloadSubscriptionId)
            {
            Get-Relocationpull -SubscriptionId $subscriptionid
            Update-FolderStructureInJson -SubscriptionId $subscriptionid
            Script-Curation -SubscriptionId $subscriptionid
            }
            modify-settingfilename -workloadname ${{ env.workloadFolderName }}

            #redirect error
                $GIT_REDIRECT_STDERR = '2>&1'

                Write-Verbose "Setting git config...." -Verbose 

                git config --global user.email "azuredevops@microsoft.com"
                git config --global user.name "Azure DevOps"             

                git branch

                Write-Verbose "CHECK GIT STATUS..." -Verbose 
                git status

                Write-Verbose "git checkout...." -Verbose 
                git checkout -b "${{ steps.branch-detection.outputs.newBranchName }}"

                Write-Verbose "git pull...." -Verbose 
                git pull origin "${{ steps.branch-detection.outputs.newBranchName }}"

                Write-Verbose "GIT ADD..." -Verbose 
                git add "$(WorkloadFolderName)/" src/"${{ env.workloadFolderName }}"_Settings.json

                Write-Verbose "GIT REMOVE..." -Verbose 
                git rm src/Settings.json

                Write-Verbose "Commiting the changes..." -Verbose 
                git commit -m "Update from Build"

                Write-Verbose "Pushing the changes..." -Verbose 
                git push origin "${{ steps.branch-detection.outputs.newBranchName }}"

                Write-Verbose "CHECK GIT STATUS..." -Verbose 
                git status
                }
                catch{
                  $statePath = $pwd
                  $branchName = "main"
                  Import-Module "$statePath/src/internal/functions/Log-Exceptions.ps1" -Force 
                  $scriptPath= ($MyInvocation.MyCommand).Definition
                  $scriptName= "Pull-Pipeline"+"_"+([io.fileinfo]$MyInvocation.MyCommand.Definition).BaseName

                  $settinglocation=(Get-ChildItem -Path "$statePath/src/").Name
                  foreach($locationfile in $settinglocation){
                  if($locationfile -match "Settings.json")
                  {
                  $settingfile=get-content -path "$statePath/src/$locationfile"
                  $logPath=($settingfile | ConvertFrom-Json).RelocationSettings.LogPath 
                  }
                  }
                  $Result = ""
                  if($Error.Count){ $Result = "Failed"}
                  Log-Exceptions -ScriptName $scriptName -LogPath "$statePath/$logPath" -Exception "$PSItem.Exception.Message" -Result $Result -ScriptPath $scriptPath -branchName $branchName
                  $LASTEXITCODE = 1
                  write-host "powershell exit code" $LASTEXITCODE -BackgroundColor Red
                  
                  }
