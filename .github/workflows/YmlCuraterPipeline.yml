name: "YmlCuraterPipeline"

#
# Triggers
# Automated triggers are configured via Branch Policies
# within Azure Repos. It's also recommended to manually
# disable CI triggers with overrides.
#

on:
  workflow_dispatch:
  push:
    branches: 
     - users/siddhigupta/generic_internal_function

env:
  workloadFolderName: 'InfraApps'
  skipComponentGovernanceDetection: true
  modulesFolder: '$(System.DefaultWorkingDirectory)/Modules'
  variablePath: '.global/Pipelines/.templates/vars.yml'
  serviceConnection: 'RelocationAutomation_SC'
  YmlCuraterPipeline_request: 'Automated state'
  commit_message: 'Automated commit'

jobs:
  ymlCurater: 
  runs_on: 'ubuntu-latest'
  steps:
       
      - name: Set environment variables
        uses: ./.github/actions/templates/setEnvironmentVariables
        with:
          variablesPath: ${{ env.variablesPath }}
   
      - uses: ./.github/actions/templates/sharedSteps
        with:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

      - name: Configure
        shell: bash
        run: |
            git config user.name "Azure DevOps"
            git config user.email "azuredevops@microsoft.com"

      - name: Yml curation
        id: yml-curation
        uses: azure/powershell@v1
        with:
          azPSVersion: 'latest'
          inlineScript: |
            try{
            $Env:PSModulePath = $Env:PSModulePath, '$env:GITHUB_WORKSPACE' -join [IO.Path]::PathSeparator
            Import-Module .\src\internal\functions\Create-YmlFileObject.ps1 -Force
            Import-Module .\src\internal\functions\Curated-YmlFile.ps1 -Force
            Install-Module powershell-yaml -Force
            
            $settingfile=get-content -path .\src\${{env.workloadFolderName}}_Settings.json
            $IncludeWorkloadSubscriptionId=($settingfile | ConvertFrom-Json).RelocationSettings.IncludeWorkloadSubscriptionId
            foreach($subscriptionid in $IncludeWorkloadSubscriptionId)
            {
            Curated-YmlFile -SubscriptionId $subscriptionid -serviceConnection  "${{ env.serviceConnection }}" -branchName ${{ github.ref }}
            }
            
            #redirect error
                $GIT_REDIRECT_STDERR = '2>&1'

                Write-Verbose "Setting git config...." -Verbose 

                git config --global user.email "azuredevops@microsoft.com"
                git config --global user.name "Azure DevOps"             

                git branch

                Write-Verbose "CHECK GIT STATUS..." -Verbose 
                git status
        
                Write-Verbose "git checkout...." -Verbose 
                git checkout -b ${{ github.ref }}

                Write-Verbose "git pull...." -Verbose 
                git pull origin ${{ github.ref }}

                Write-Verbose "GIT ADD..." -Verbose 
                git add "${{ env.workloadFolderName }}/"

                Write-Verbose "Commiting the changes..." -Verbose 
                git commit -m "Update from Build"

                Write-Verbose "Pushing the changes..." -Verbose 
                git push origin ${{ github.ref }}

                Write-Verbose "CHECK GIT STATUS..." -Verbose 
                git status
                 }
                  catch{
                    $statePath = $pwd
                    Import-Module "$statePath/src/internal/functions/Log-Exceptions.ps1" -Force 
                    $scriptPath= ($MyInvocation.MyCommand).Definition
                    $scriptName= "YmlCuraterPipeline"+"_"+([io.fileinfo]$MyInvocation.MyCommand.Definition).BaseName

                    $settinglocation=(Get-ChildItem -Path "$statePath/src/").Name
                    foreach($locationfile in $settinglocation){
                    if($locationfile -match "_Settings.json")
                    {
                    $settingfile=get-content -path "$statePath/src/$locationfile"
                    $logPath=($settingfile | ConvertFrom-Json).RelocationSettings.LogPath 
                    }
                    }
                    $Result = ""
                    if($Error.Count){ $Result = "Failed"}
                    Log-Exceptions -ScriptName $scriptName -LogPath "$statePath/$logPath" -Exception "$PSItem.Exception.Message" -Result $Result -ScriptPath $scriptPath -branchName $(branch)
                    $LASTEXITCODE = 1
                    write-host "powershell exit code" $LASTEXITCODE -BackgroundColor Red
                    
                    }
